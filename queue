#include <Arduino.h>
#include <HardwareSerial.h>
#include <SPI.h>
#include <SD.h>
#include <Wire.h>
#include <RTClib.h>

// --------------------- SD Card Pin Definitions ---------------------
#define SD_CS   PA4    // CS
#define SD_SCK  PA5    // SCK
#define SD_MISO PA6    // MISO
#define SD_MOSI PA7    // MOSI

// --------------------- UART1 for GPS & Debug -----------------------
//HardwareSerial Serial1(PA10, PA9); // RX=PA10, TX=PA9

// --------------------- GPS Buffer & Timezone -----------------------
char buffer[128];
int bufferIndex = 0;

// --------------------- Initialize RTC -----------------------------
RTC_DS3231 rtc;
char dateTimeStr[20]; // To store formatted date/time from RTC

// --------------------- GPS Data Struct -----------------------
struct GpsData {
  char lat[11];
  char ns;          // 'N' or 'S'
  char lon[11];
  char ew;          // 'E' or 'W'
  float speed;      // in km/h
  char mode;        // 'A' = Active, 'V' = Void
  bool dataReady;   // true if we got a valid RMC parse
} gpsData;

// --------------------- Keep track of last logged second ---------------------
static int lastLoggedSecond = -1;

// --------------------- Log Data Buffer for USB Transfer ---------------------
#define MAX_LOG_ENTRIES 50
char logEntries[MAX_LOG_ENTRIES][64]; // Buffer to store log entries
int logEntriesCount = 0;
bool isTransferActive = false;

// --------------------- Command Processing ---------------------
#define CMD_BUFFER_SIZE 64
char cmdBuffer[CMD_BUFFER_SIZE];
int cmdBufferIndex = 0;

// --------------------- Command Constants ---------------------
#define LOGGER_CMD "GET_72HRS_DATA"
#define CMD_HEAD "HEAD"
#define CMD_TRP "TRP"
#define CMD_1TP "1TP"
#define CMD_6TP "6TP"
#define CMD_VIOL "VIOL"
#define CMD_RST "RST"
#define SET_SPEED_PREFIX "SET_SPEED="
#define SET_LIMP_PREFIX "SET_LIMP="
#define SET_TIME_PREFIX "SET_TIME="

// --------------------- Speed Limit Settings ---------------------
int speedLimit = 80;     // Default speed limit in km/h
int limpSpeed = 40;      // Default limp speed in km/h
bool speedLimitExceeded = false;

// --------------------- Circular Queue Implementation ---------------------
// Full capacity for 72 hours of logging
#define QUEUE_CAPACITY 51840  // (72 hours * 60 minutes * 60 seconds) / 5 seconds
#define ENTRY_SIZE 64         // Fixed size of each log entry in bytes
#define BLOCK_SIZE 20         // Number of entries per batch write/read
#define INDEX_FILENAME "queue.idx"
#define DATA_FILENAME "queue.dat"

// --------------------- Queue Header Structure ---------------------
struct QueueHeader {
  uint32_t magic;             // Magic number to verify header integrity (0xGPSQ)
  uint32_t version;           // Version of the queue format
  uint32_t headIndex;         // Current head position in entries (write position)
  uint32_t tailIndex;         // Current tail position in entries (oldest data)
  uint32_t entryCount;        // Number of valid entries in the queue
  uint32_t totalEntriesEver;  // Total entries ever written (allows detecting wrapping)
  uint32_t lastTimestamp;     // Unix timestamp of the most recent entry
  uint8_t reserved[36];       // Reserved for future use (padding to 64 bytes)
};

// --------------------- Circular Queue Class ---------------------
class CircularQueue {
private:
  QueueHeader header;
  File dataFile;
  bool initialized;
  
  // Open queue files with proper access mode
  bool openFiles(bool readOnly = false) {
    if (dataFile) dataFile.close();
    
    // Try multiple times to open the file
    for (int retry = 0; retry < 3; retry++) {
      if (readOnly) {
        dataFile = SD.open(DATA_FILENAME, FILE_READ);
      } else {
        dataFile = SD.open(DATA_FILENAME, FILE_WRITE);
      }
      
      if (dataFile) return true;
      delay(100); // Wait a bit before retrying
    }
    
    Serial1.print("Failed to open data file: ");
    Serial1.println(DATA_FILENAME);
    return false;
  }
  
  // Load queue header from SD card
  bool loadHeader() {
    Serial1.println("Loading queue header...");
    File indexFile = SD.open(INDEX_FILENAME, FILE_READ);
    if (!indexFile) {
      Serial1.println("Failed to open index file for reading");
      return false;
    }
    
    size_t bytesRead = indexFile.read((uint8_t*)&header, sizeof(QueueHeader));
    indexFile.close();
    
    if (bytesRead != sizeof(QueueHeader)) {
      Serial1.print("Header read incomplete: ");
      Serial1.print(bytesRead);
      Serial1.print(" of ");
      Serial1.print(sizeof(QueueHeader));
      Serial1.println(" bytes");
      return false;
    }
    
    // Verify magic number
    if (header.magic != 0x47505351) { // 'GPSQ'
      Serial1.println("Invalid header magic number");
      return false;
    }
    
    Serial1.println("Header loaded successfully");
    return true;
  }
  
  // Save queue header to SD card
  bool saveHeader() {
    Serial1.println("Saving queue header...");
    
    // Try multiple times to save the header
    for (int retry = 0; retry < 3; retry++) {
      File indexFile = SD.open(INDEX_FILENAME, FILE_WRITE);
      if (!indexFile) {
        Serial1.println("Failed to open index file for writing");
        delay(100); // Wait before retrying
        continue;
      }
      
      // Seek to beginning and write header
      indexFile.seek(0);
      size_t bytesWritten = indexFile.write((uint8_t*)&header, sizeof(QueueHeader));
      indexFile.flush(); // Ensure data is written
      indexFile.close();
      
      if (bytesWritten != sizeof(QueueHeader)) {
        Serial1.print("Header write incomplete: ");
        Serial1.print(bytesWritten);
        Serial1.print(" of ");
        Serial1.print(sizeof(QueueHeader));
        Serial1.println(" bytes");
        continue;
      }
      
      Serial1.println("Header saved successfully");
      return true;
    }
    
    Serial1.println("Failed to save header after multiple attempts");
    return false;
  }
  
  // Calculate file position from logical index
  uint32_t indexToPosition(uint32_t index) {
    return (index % QUEUE_CAPACITY) * ENTRY_SIZE;
  }

public:
  CircularQueue() : initialized(false) {
    memset(&header, 0, sizeof(QueueHeader));
    header.magic = 0x47505351; // 'GPSQ'
    header.version = 1;
  }
  
  // Check if queue is initialized
  bool isInitialized() const {
    return initialized;
  }
  
  // Initialize the circular queue
  bool begin() {
    Serial1.println("Starting CircularQueue initialization...");
    
    // Try to load existing header
    if (SD.exists(INDEX_FILENAME)) {
      Serial1.println("Index file exists, attempting to load");
      if (loadHeader()) {
        Serial1.println("Circular queue loaded from SD");
        initialized = true;
        return true;
      } else {
        Serial1.println("Failed to load existing header, creating new");
        // If the file exists but is corrupt, remove it to start fresh
        SD.remove(INDEX_FILENAME);
      }
    } else {
      Serial1.println("Index file doesn't exist, creating new");
    }
    
    // Create new queue if loading failed
    header.headIndex = 0;
    header.tailIndex = 0;
    header.entryCount = 0;
    header.totalEntriesEver = 0;
    header.lastTimestamp = 0;
    
    // First check if we can create/open the index file
    {
      File testIdx = SD.open(INDEX_FILENAME, FILE_WRITE);
      if (!testIdx) {
        Serial1.println("Cannot create index file - check SD card permissions");
        return false;
      }
      testIdx.close();
    }
    
    // Create the data file if needed
    if (!SD.exists(DATA_FILENAME)) {
      Serial1.println("Data file doesn't exist, creating it");
      dataFile = SD.open(DATA_FILENAME, FILE_WRITE);
      if (!dataFile) {
        Serial1.println("Failed to create data file - check SD card");
        return false;
      }
      
      // Instead of pre-allocating the entire file, just write a small test
      Serial1.println("Testing data file write...");
      char testData[64] = "CircularQueueTestData";
      if (dataFile.write((uint8_t*)testData, sizeof(testData)) != sizeof(testData)) {
        Serial1.println("Failed to write test data to data file");
        dataFile.close();
        return false;
      }
      
      dataFile.close();
      Serial1.println("Data file created successfully");
    } else {
      Serial1.println("Data file already exists");
    }
    
    // Save the new header
    if (!saveHeader()) {
      Serial1.println("Failed to save header - queue initialization aborted");
      return false;
    }
    
    Serial1.println("Circular queue initialized successfully");
    initialized = true;
    return true;
  }
  
  // Add a new entry to the queue
  bool enqueue(const char* entry, uint32_t timestamp) {
    if (!initialized) {
      Serial1.println("Queue not initialized - cannot enqueue");
      return false;
    }
    
    // Open data file for writing
    if (!openFiles()) {
      Serial1.println("Failed to open data file for writing");
      return false;
    }
    
    // Seek to write position
    uint32_t position = indexToPosition(header.headIndex);
    if (!dataFile.seek(position)) {
      Serial1.println("Failed to seek to write position");
      dataFile.close();
      return false;
    }
    
    // Write data
    size_t entryLen = strlen(entry);
    size_t bytesWritten = dataFile.write((uint8_t*)entry, entryLen);
    
    // Check if write was successful
    if (bytesWritten != entryLen) {
      Serial1.print("Write incomplete: ");
      Serial1.print(bytesWritten);
      Serial1.print(" of ");
      Serial1.print(entryLen);
      Serial1.println(" bytes");
      dataFile.close();
      return false;
    }
    
    // Fill remaining bytes with zeros
    if (bytesWritten < ENTRY_SIZE) {
      uint8_t zeros[ENTRY_SIZE - bytesWritten];
      memset(zeros, 0, ENTRY_SIZE - bytesWritten);
      dataFile.write(zeros, ENTRY_SIZE - bytesWritten);
    }
    
    // Update header
    header.headIndex = (header.headIndex + 1) % QUEUE_CAPACITY;
    header.totalEntriesEver++;
    header.lastTimestamp = timestamp;
    
    // If queue is full, move tail
    if (header.entryCount >= QUEUE_CAPACITY) {
      header.tailIndex = (header.tailIndex + 1) % QUEUE_CAPACITY;
    } else {
      header.entryCount++;
    }
    
    dataFile.close();
    
    // Save updated header
    if (!saveHeader()) {
      Serial1.println("Warning: Failed to update header after write");
      // Continue anyway since the data was written
    }
    
    return true;
  }
  
  // Read entries from queue for a specified time range
  bool readEntriesSince(uint32_t sinceTimestamp, void (*callback)(const char* entry)) {
    if (!initialized || header.entryCount == 0) {
      Serial1.println("Queue not initialized or empty");
      return false;
    }
    
    // Open data file for reading
    if (!openFiles(true)) {
      Serial1.println("Failed to open data file for reading");
      return false;
    }
    
    // Determine how many entries to read
    uint32_t entriesToRead = header.entryCount;
    uint32_t currentIndex = header.tailIndex;
    
    char entryBuffer[ENTRY_SIZE + 1]; // +1 for null terminator
    int entriesSent = 0;
    
    for (uint32_t i = 0; i < entriesToRead; i++) {
      uint32_t position = indexToPosition(currentIndex);
      dataFile.seek(position);
      
      // Read entry
      memset(entryBuffer, 0, ENTRY_SIZE + 1);
      size_t bytesRead = dataFile.read((uint8_t*)entryBuffer, ENTRY_SIZE);
      if (bytesRead != ENTRY_SIZE) {
        Serial1.println("Warning: Incomplete read from queue");
      }
      
      entryBuffer[ENTRY_SIZE] = '\0'; // Ensure null termination
      
      // Process entry (extract timestamp from DDMMYY,HHMMSS format)
      if (strlen(entryBuffer) > 13) { // Minimum length for a valid entry
        int day = (entryBuffer[0] - '0') * 10 + (entryBuffer[1] - '0');
        int month = (entryBuffer[2] - '0') * 10 + (entryBuffer[3] - '0');
        int year = 2000 + (entryBuffer[4] - '0') * 10 + (entryBuffer[5] - '0');
        
        int hour = (entryBuffer[7] - '0') * 10 + (entryBuffer[8] - '0');
        int minute = (entryBuffer[9] - '0') * 10 + (entryBuffer[10] - '0');
        int second = (entryBuffer[11] - '0') * 10 + (entryBuffer[12] - '0');
        
        // Create DateTime for this entry
        DateTime entryTime(year, month, day, hour, minute, second);
        
        // Check if this entry is recent enough
        if (entryTime.unixtime() >= sinceTimestamp) {
          callback(entryBuffer);
          entriesSent++;
          
          // Add small delay to prevent buffer overflow
          if (entriesSent % 10 == 0) {
            delay(50);
          }
        }
      }
      
      // Move to next entry
      currentIndex = (currentIndex + 1) % QUEUE_CAPACITY;
    }
    
    dataFile.close();
    return entriesSent > 0;
  }
  
  // Get queue statistics
  void getStats(uint32_t* count, uint32_t* capacity, uint32_t* latestTimestamp) {
    if (count) *count = header.entryCount;
    if (capacity) *capacity = QUEUE_CAPACITY;
    if (latestTimestamp) *latestTimestamp = header.lastTimestamp;
  }
};

// Create global circular queue instance
CircularQueue gpsQueue;

// Callback function to process and send entries during retrieval
void processQueueEntry(const char* entry) {
  // Send entry over Serial
  Serial.println(entry);
}

// --------------------- Format RTC Date and Time ---------------------
void formatRTCDateTime(DateTime now, char* dateStr, char* timeStr) {
  // Format date as "DDMMYY"
  sprintf(dateStr, "%02d%02d%02d", now.day(), now.month(), now.year() % 100);
  
  // Format time as "HHMMSS"
  sprintf(timeStr, "%02d%02d%02d", now.hour(), now.minute(), now.second());
}

// --------------------- Parse RMC Sentence ---------------------
void parseRMC(char* sentence) {
  // Example: $GPRMC,HHMMSS,A,lat,NS,lon,EW,speed,angle,date,...
  // or       $GNRMC,HHMMSS,A,lat,NS,lon,EW,speed,angle,date,...
  char* token = strtok(sentence, ",");
  int fieldCount = 0;
  
  // Reset dataReady each new parse
  gpsData.dataReady = false;

  while (token != NULL) {
    switch(fieldCount) {
      case 2: // Status (A=Active, V=Void)
        if (strlen(token) > 0) {
          gpsData.mode = token[0];
        }
        break;
      case 3: // Latitude
        if (strlen(token) > 0) {
          strncpy(gpsData.lat, token, 10);
          gpsData.lat[10] = '\0';
        }
        break;
      case 4: // N/S
        if (strlen(token) > 0) {
          gpsData.ns = token[0];
        }
        break;
      case 5: // Longitude
        if (strlen(token) > 0) {
          strncpy(gpsData.lon, token, 10);
          gpsData.lon[10] = '\0';
        }
        break;
      case 6: // E/W
        if (strlen(token) > 0) {
          gpsData.ew = token[0];
        }
        break;
      case 7: // Speed in knots
        if (strlen(token) > 0) {
          gpsData.speed = atof(token) * 1.852; // knots -> km/h
          
          // Check speed limit
          if (gpsData.speed > speedLimit) {
            speedLimitExceeded = true;
          } else {
            speedLimitExceeded = false;
          }
        } else {
          gpsData.speed = 0.0;
        }
        break;
      case 9: // We don't need GPS date anymore since we'll use RTC
        gpsData.dataReady = true;
        break;
    }
    token = strtok(NULL, ",");
    fieldCount++;
  }

  // If we got valid GPS data and the fix is Active
  if (gpsData.dataReady && gpsData.mode == 'A') {
    // Get current date and time from RTC
    DateTime now = rtc.now();
    char rtcDate[7]; // DDMMYY
    char rtcTime[7]; // HHMMSS
    
    // Format RTC date and time
    formatRTCDateTime(now, rtcDate, rtcTime);
    
    // Print the GPS data with RTC timestamp to Serial1 for debugging
    Serial1.print(rtcDate);
    Serial1.print(",");
    Serial1.print(rtcTime);
    Serial1.print(",");
    Serial1.print(gpsData.lon);
    Serial1.print(gpsData.ew);
    Serial1.print(",");
    Serial1.print(gpsData.lat);
    Serial1.print(gpsData.ns);
    Serial1.print(",");
    Serial1.println(gpsData.speed, 1);

    // --------------------- EXACT 5s LOGGING (RTC Time Based) ---------------------
    // Log at 0, 5, 10, 15... seconds
    int currentSec = now.second();
    
    // If it's exactly a multiple of 5 seconds
    if ((currentSec % 5) == 0) {
      // And we haven't logged this particular second yet
      if (currentSec != lastLoggedSecond) {
        lastLoggedSecond = currentSec;

        // Prepare log line
        char logLine[64];
char speedStr[10];  // Buffer to hold the converted float as a string
dtostrf(gpsData.speed, 4, 1, speedStr); // Convert float to string: 4 digits, 1 decimal

sprintf(logLine, "%s,%s,%s%c,%s%c,%s", 
        rtcDate, rtcTime, 
        gpsData.lon, gpsData.ew, 
        gpsData.lat, gpsData.ns, 
        speedStr);
        
        // Only log to queue if it's initialized
        if (gpsQueue.isInitialized()) {
          // Log to circular queue for 72-hour data
          bool logSuccess = gpsQueue.enqueue(logLine, now.unixtime());

          // Print status of logging operation
          if (logSuccess) {
            Serial1.println("Queue write successful");
          } else {
            Serial1.println("Queue write failed!");
          }
        } else {
          Serial1.println("Queue not initialized - skipping queue log");
        }

        // Store in memory buffer for USB transfer regardless of queue status
        if (logEntriesCount < MAX_LOG_ENTRIES) {
          strcpy(logEntries[logEntriesCount], logLine);
          logEntriesCount++;
        }

        // Print to Serial1 for debug with fields explicitly displayed
        Serial1.println("Data logged. Logged line:");
        // Print each field explicitly to ensure we see the speed
        Serial1.print(rtcDate); Serial1.print(",");
        Serial1.print(rtcTime); Serial1.print(",");
        Serial1.print(gpsData.lon); Serial1.print(gpsData.ew); Serial1.print(",");
        Serial1.print(gpsData.lat); Serial1.print(gpsData.ns); Serial1.print(",");
        Serial1.println(gpsData.speed, 1);  // Print with 1 decimal place
      }
    }

  } else {
    // If fix is Void
    if (gpsData.mode == 'V') {
      Serial1.println("GPS signal lost");
      
      // Get current date and time from RTC for logging
      DateTime now = rtc.now();
      char rtcDate[7]; // DDMMYY
      char rtcTime[7]; // HHMMSS
      
      // Format RTC date and time
      formatRTCDateTime(now, rtcDate, rtcTime);
      
      // Log even when GPS signal is lost
      int currentSec = now.second();
      
      // If it's exactly a multiple of 5 seconds
      if ((currentSec % 5) == 0) {
        // And we haven't logged this particular second yet
        if (currentSec != lastLoggedSecond) {
          lastLoggedSecond = currentSec;

          // Prepare log line with "SL" for all GPS fields
          char logLine[64];
          sprintf(logLine, "%s,%s,SL,SL,SL", rtcDate, rtcTime);
          
          // Only log to queue if it's initialized
          if (gpsQueue.isInitialized()) {
            // Log to circular queue
            bool logSuccess = gpsQueue.enqueue(logLine, now.unixtime());

            // Print status of logging operation
            if (logSuccess) {
              Serial1.println("Queue write successful");
            } else {
              Serial1.println("Queue write failed!");
            }
          } else {
            Serial1.println("Queue not initialized - skipping queue log");
          }

          // Store in memory buffer for USB transfer regardless of queue status
          if (logEntriesCount < MAX_LOG_ENTRIES) {
            strcpy(logEntries[logEntriesCount], logLine);
            logEntriesCount++;
          }

          // Print to Serial1 for debug
          Serial1.println("Signal lost data logged:");
          Serial1.println(logLine);
        }
      }
    }
  }
}

// --------------------- Process Commands from USB ---------------------
void processCommand(char* cmd) {
  // Remove any newline or carriage return
  char* newline = strchr(cmd, '\n');
  if (newline) *newline = '\0';
  
  newline = strchr(cmd, '\r');
  if (newline) *newline = '\0';
  
  // Process the commands
  if (strcmp(cmd, LOGGER_CMD) == 0) {
    // Get data from circular queue for last 72 hours
    Serial.println("Retrieving data from circular queue for last 72 hours...");
    
    // Only proceed if queue is initialized
    if (!gpsQueue.isInitialized()) {
      Serial.println("ERROR: Circular queue not initialized");
      return;
    }
    
    // Get current time from RTC
    DateTime now = rtc.now();
    
    // Calculate timestamp for 72 hours ago
    uint32_t secondsIn72Hours = 3 * 24 * 60 * 60;
    uint32_t sinceTimestamp = now.unixtime() - secondsIn72Hours;
    
    // Print debug info
    Serial.print("Current time: ");
    Serial.print(now.year()); Serial.print("/");
    Serial.print(now.month()); Serial.print("/");
    Serial.print(now.day()); Serial.print(" ");
    Serial.print(now.hour()); Serial.print(":");
    Serial.print(now.minute()); Serial.print(":");
    Serial.println(now.second());
    
    Serial.print("Cutoff time (72 hours ago): ");
    DateTime cutoffTime(sinceTimestamp);
    Serial.print(cutoffTime.year()); Serial.print("/");
    Serial.print(cutoffTime.month()); Serial.print("/");
    Serial.print(cutoffTime.day()); Serial.print(" ");
    Serial.print(cutoffTime.hour()); Serial.print(":");
    Serial.print(cutoffTime.minute()); Serial.print(":");
    Serial.println(cutoffTime.second());
    
    // Get queue stats
    uint32_t count, capacity, latestTimestamp;
    gpsQueue.getStats(&count, &capacity, &latestTimestamp);
    Serial.print("Queue capacity: "); Serial.println(capacity);
    Serial.print("Entries in queue: "); Serial.println(count);
    
    // Read and process entries since the cutoff time
    if (gpsQueue.readEntriesSince(sinceTimestamp, processQueueEntry)) {
      Serial.println("Transfer complete");
    } else {
      Serial.println("No entries found or transfer failed");
    }
  } 
  else if (strcmp(cmd, CMD_HEAD) == 0) {
    Serial.println("Current settings:");
    Serial.print("Speed limit: "); Serial.println(speedLimit);
    Serial.print("Limp speed: "); Serial.println(limpSpeed);
    DateTime now = rtc.now();
    Serial.print("Device time: ");
    Serial.print(now.year(), DEC); Serial.print('-');
    Serial.print(now.month(), DEC); Serial.print('-');
    Serial.print(now.day(), DEC); Serial.print(' ');
    Serial.print(now.hour(), DEC); Serial.print(':');
    Serial.print(now.minute(), DEC); Serial.print(':');
    Serial.println(now.second(), DEC);
    
    // Add circular queue info
    if (gpsQueue.isInitialized()) {
      uint32_t count, capacity, latestTimestamp;
      gpsQueue.getStats(&count, &capacity, &latestTimestamp);
      Serial.print("Queue entries: "); Serial.print(count); 
      Serial.print(" of "); Serial.print(capacity);
      Serial.print(" ("); Serial.print((count * 100) / capacity); 
      Serial.println("%)");
    } else {
      Serial.println("Circular queue not initialized");
    }
  } 
  else if (strcmp(cmd, CMD_TRP) == 0) {
    Serial.println("Trip data:");
    Serial.println("TripID,StartTime,EndTime,Distance,MaxSpeed,AvgSpeed");
    Serial.println("1,230145,231532,12.5,78.5,45.2");
    // This is a placeholder - you'd implement actual trip data tracking
  } 
  else if (strcmp(cmd, CMD_1TP) == 0) {
    Serial.println("Last trip data:");
    Serial.println("StartTime,EndTime,Distance,MaxSpeed,AvgSpeed");
    Serial.println("230145,231532,12.5,78.5,45.2");
    // This is a placeholder - you'd implement actual trip data tracking
  } 
  else if (strcmp(cmd, CMD_6TP) == 0) {
    Serial.println("Last 6 trips data:");
    Serial.println("TripID,StartTime,EndTime,Distance,MaxSpeed,AvgSpeed");
    Serial.println("1,230145,231532,12.5,78.5,45.2");
    Serial.println("2,232145,233532,8.3,65.2,38.7");
    // This is a placeholder - you'd add more trip data
  } 
  else if (strcmp(cmd, CMD_VIOL) == 0) {
    Serial.println("Speed violations:");
    Serial.println("Time,Speed,Duration");
    Serial.println("231245,85.2,45");
    // This is a placeholder - you'd implement actual violation tracking
  } 
  else if (strcmp(cmd, CMD_RST) == 0) {
    Serial.println("Resetting device...");
    // Reset relevant counters and states
    logEntriesCount = 0;
    speedLimitExceeded = false;
    Serial.println("Reset complete");
  }
  else if (strncmp(cmd, SET_SPEED_PREFIX, strlen(SET_SPEED_PREFIX)) == 0) {
    // Extract the speed value
    int newSpeed = atoi(cmd + strlen(SET_SPEED_PREFIX));
    if (newSpeed > 0 && newSpeed < 200) {
      speedLimit = newSpeed;
      Serial.print("Speed limit set to: ");
      Serial.println(speedLimit);
    } else {
      Serial.println("Invalid speed value");
    }
  }
  else if (strncmp(cmd, SET_LIMP_PREFIX, strlen(SET_LIMP_PREFIX)) == 0) {
    // Extract the limp speed value
    int newLimpSpeed = atoi(cmd + strlen(SET_LIMP_PREFIX));
    if (newLimpSpeed > 0 && newLimpSpeed < speedLimit) {
      limpSpeed = newLimpSpeed;
      Serial.print("Limp speed set to: ");
      Serial.println(limpSpeed);
    } else {
      Serial.println("Invalid limp speed value");
    }
  }
  else if (strncmp(cmd, SET_TIME_PREFIX, strlen(SET_TIME_PREFIX)) == 0) {
    // Extract time string (format: YYYY-MM-DD HH:MM:SS)
    char* timeStr = cmd + strlen(SET_TIME_PREFIX);
    int year, month, day, hour, minute, second;
    
    // Parse the time string
    if (sscanf(timeStr, "%d-%d-%d %d:%d:%d", &year, &month, &day, &hour, &minute, &second) == 6) {
      rtc.adjust(DateTime(year, month, day, hour, minute, second));
      Serial.println("Time set successfully");
    } else {
      Serial.println("Invalid time format. Use: YYYY-MM-DD HH:MM:SS");
    }
  }
  else {
    Serial.println("Unknown command");
  }
}

// --------------------- Setup ---------------------
void setup() {
  // Start Serial (USB) at the baud rate expected by the PC application
  Serial.begin(115200);
  delay(1500); // Give USB time to initialize
  
  // Start Serial1 for GPS communication and debugging
  Serial1.begin(9600);
  delay(1000);

  Serial1.println("\nGPS Logger with Circular Queue, RTC Timestamp and USB Communication");
  Serial.println("\nSTM32 GPS Logger with 72-Hour Circular Queue");
  Serial.println("Ready to receive commands.");

  // Initialize I2C for RTC
  Wire.begin();
  
  // Initialize RTC module
  if (!rtc.begin()) {
    Serial1.println("Couldn't find DS3231 RTC");
    while (1);
  }
  
  // Check if RTC lost power and needs to be set
  if (rtc.lostPower()) {
    Serial1.println("RTC lost power, setting to compile time");
    // Set RTC to the date & time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
  
  Serial1.println("DS3231 RTC initialized");

  // Configure SPI pins for SD card
  pinMode(SD_CS, OUTPUT);
  digitalWrite(SD_CS, HIGH); // Deselect SD card

  // Initialize SPI with conservative settings
  SPI.begin();
  SPI.setClockDivider(SPI_CLOCK_DIV64); // Conservative speed (was SPI_CLOCK_DIV128)
  SPI.setDataMode(SPI_MODE0);
  SPI.setBitOrder(MSBFIRST);

  Serial1.println("\nPower-up sequence:");
  digitalWrite(SD_CS, HIGH);
  delay(100);

  // Send dummy clock cycles
  for(int i = 0; i < 10; i++) {
    SPI.transfer(0xFF);
    Serial1.print(".");
  }
  Serial1.println(" Done");

  delay(100);

  Serial1.println("\nInitializing SD card...");
  
  // Attempt to initialize SD with more careful error checking
  for (int retry = 0; retry < 3; retry++) {
    if (SD.begin(SD_CS)) {
      Serial1.println("SD card initialization successful!");
      
      // Test file operations
      File dataFile = SD.open("test.txt", FILE_WRITE);
      if (dataFile) {
        Serial1.println("\nWriting to test.txt...");
        dataFile.println("Testing SD card with level shifter");
        dataFile.println("Module is working properly!");
        dataFile.close();
        Serial1.println("Write successful!");
        
        // Verify we can read the file back
        dataFile = SD.open("test.txt", FILE_READ);
        if (dataFile) {
          Serial1.println("Reading from test.txt:");
          while (dataFile.available()) {
            Serial1.write(dataFile.read());
          }
          dataFile.close();
          Serial1.println("\nRead test successful!");
        } else {
          Serial1.println("Failed to open test.txt for reading!");
          Serial1.println("SD card may be write-protected or corrupted");
          // Continue without SD card
          break;
        }
      } else {
        Serial1.println("Failed to open test.txt for writing!");
        Serial1.println("SD card may be write-protected or corrupted");
        Serial1.println("Check the physical write protection switch on the SD card");
        // Continue without SD card
        break;
      }
      
      // Initialize circular queue with better error reporting
      Serial1.println("\nInitializing circular queue...");
      if (gpsQueue.begin()) {
        Serial1.println("Circular queue initialized successfully");
        uint32_t count, capacity, timestamp;
        gpsQueue.getStats(&count, &capacity, &timestamp);
        Serial1.print("Queue capacity: "); Serial1.println(capacity);
        Serial1.print("Entries in queue: "); Serial1.println(count);
      } else {
        Serial1.println("Failed to initialize circular queue! Logger will continue without queue functionality.");
      }
      
      // SD card initialized and tested successfully
      break;
    } else {
      Serial1.print("SD card initialization failed! Retry ");
      Serial1.print(retry + 1);
      Serial1.println("/3");
      delay(500);
    }
  }

  // Clear GPS data struct
  memset(&gpsData, 0, sizeof(gpsData));
  gpsData.mode = 'V'; // Initial mode is Void until we get a valid fix
  
  // Initialize GPS data fields with default values
  strcpy(gpsData.lat, "0000.0000");
  gpsData.ns = 'N';
  strcpy(gpsData.lon, "00000.0000");
  gpsData.ew = 'E';
  gpsData.speed = 0.0;
  gpsData.dataReady = false;
  
  // Initialize command buffer
  memset(cmdBuffer, 0, CMD_BUFFER_SIZE);
  cmdBufferIndex = 0;
}

// --------------------- Main Loop ---------------------
void loop() {
  // 1. Check for USB commands
  while (Serial.available() > 0) {
    char c = Serial.read();
    
    // Echo character back to USB
    Serial.write(c);
    
    // Add to command buffer if not end of line
    if (c != '\n' && c != '\r') {
      if (cmdBufferIndex < CMD_BUFFER_SIZE - 1) {
        cmdBuffer[cmdBufferIndex++] = c;
      }
    } else {
      // Process command on newline or carriage return
      if (cmdBufferIndex > 0) {
        cmdBuffer[cmdBufferIndex] = '\0';
        processCommand(cmdBuffer);
        cmdBufferIndex = 0;
      }
    }
  }

  // 2. Process GPS data
  while (Serial1.available() > 0) {
    char c = Serial1.read();

    if (c == '$') { // Start of NMEA
      bufferIndex = 0;
    }
    else if (c == '\n' || c == '\r') { // End of NMEA
      if (bufferIndex > 0) {
        buffer[bufferIndex] = '\0';
        // Check if it's RMC
        if (strstr(buffer, "GNRMC") || strstr(buffer, "GPRMC")) {
          parseRMC(buffer);
        }
      }
      bufferIndex = 0;
    }
    else if (bufferIndex < (int)sizeof(buffer) - 1) {
      buffer[bufferIndex++] = c;
    }
  }

  // 3. Display current RTC time every second for debug purposes
  static unsigned long lastDisplayTime = 0;
  if (millis() - lastDisplayTime >= 1000) {
    lastDisplayTime = millis();
    
    // Get current date and time from RTC
    DateTime now = rtc.now();
    
    // Format and display date and time
    sprintf(dateTimeStr, "%04d/%02d/%02d %02d:%02d:%02d", 
            now.year(), now.month(), now.day(), 
            now.hour(), now.minute(), now.second());
    
    Serial1.print("RTC: ");
    Serial1.println(dateTimeStr);
  }
}
